syntax = "proto3";
option go_package = "/;pkcs11";
import "google/protobuf/any.proto";

service PKCS11 {
  // New creates a new context and initializes the module/library for use.
  rpc New(NewRequest) returns (NewResponse) {}
  // Destroy unloads the module/library and frees any remaining memory.
  rpc Destroy(DestroyRequest) returns (EmptyResponse) {}
  // Initialize initializes the Cryptoki library.
  rpc Initialize(InitializeRequest) returns (InitializeResponse) {}
  // Finalize indicates that an application is done with the Cryptoki library.
  rpc Finalize(FinalizeRequest) returns (FinalizeResponse) {}
  // GetInfo returns general information about Cryptoki.
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {}
  // GetSlotList obtains a list of slots in the system.
  rpc GetSlotList(GetSlotListRequest) returns (GetSlotListResponse) {}
  // GetSlotInfo obtains information about a particular slot in the system.
  rpc GetSlotInfo(GetSlotInfoRequest) returns (GetSlotInfoResponse) {}
  // GetTokenInfo obtains information about a particular token
  // in the system.
  rpc GetTokenInfo(GetTokenInfoRequest) returns (GetTokenInfoResponse) {}
  // GetMechanismList obtains a list of mechanism types supported by a token.
  rpc GetMechanismList(GetMechanismListRequest)
      returns (GetMechanismListResponse) {}
  // GetMechanismInfo obtains information about a particular
  // mechanism possibly supported by a token.
  rpc GetMechanismInfo(GetMechanismInfoRequest)
      returns (GetMechanismInfoResponse) {}
  // InitToken initializes a token. The label must be 32 characters
  // long, it is blank padded if it is not. If it is longer it is capped
  // to 32 characters.
  rpc InitToken(InitTokenRequest) returns (InitTokenResponse) {}
  // InitPIN initializes the normal user's PIN.
  rpc InitPIN(InitPINRequest) returns (InitPINResponse) {}
  // SetPIN modifies the PIN of the user who is logged in.
  rpc SetPIN(SetPINRequest) returns (SetPINResponse) {}
  // OpenSession opens a session between an application and a token.
  rpc OpenSession(OpenSessionRequest) returns (OpenSessionResponse) {}
  // CloseSession closes a session between an application and a token.
  rpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse) {}
  // CloseAllSessions closes all sessions with a token.
  rpc CloseAllSessions(CloseAllSessionsRequest)
      returns (CloseAllSessionsResponse) {}
  // GetSessionInfo obtains information about the session.
  rpc GetSessionInfo(GetSessionInfoRequest) returns (GetSessionInfoResponse) {}
  // GetOperationState obtains the state of the cryptographic operation in a
  // session.
  rpc GetOperationState(GetOperationStateRequest)
      returns (GetOperationStateResponse) {}
  // SetOperationState restores the state of the cryptographic operation in a
  // session.
  rpc SetOperationState(SetOperationStateRequest)
      returns (SetOperationStateResponse) {}
  // Login logs a user into a token.
  rpc Login(LoginRequest) returns (LoginResponse) {}
  // Logout logs a user out from a token.
  rpc Logout(LogoutRequest) returns (LogoutResponse) {}
  // CreateObject creates a new object.
  rpc CreateObject(CreateObjectRequest) returns (CreateObjectResponse) {}
  // CopyObject copies an object, creating a new object for the copy.
  rpc CopyObject(CopyObjectRequest) returns (CopyObjectResponse) {}
  // DestroyObject destroys an object.
  rpc DestroyObject(DestroyObjectRequest) returns (DestroyObjectResponse) {}
  // GetObjectSize gets the size of an object in bytes.
  rpc GetObjectSize(GetObjectSizeRequest) returns (GetObjectSizeResponse) {}
  // GetAttributeValue obtains the value of one or more object attributes.
  rpc GetAttributeValue(GetAttributeValueRequest)
      returns (GetAttributeValueResponse) {}
  // SetAttributeValue modifies the value of one or more object attributes
  rpc SetAttributeValue(SetAttributeValueRequest)
      returns (SetAttributeValueResponse) {}
  // FindObjectsInit initializes a search for token and session
  // objects that match a template.
  rpc FindObjectsInit(FindObjectsInitRequest)
      returns (FindObjectsInitResponse) {}
  // FindObjects continues a search for token and session
  // objects that match a template, obtaining additional object
  // handles. Calling the function repeatedly may yield additional results until
  // an empty slice is returned.
  //
  // The returned boolean value is deprecated and should be ignored.
  rpc FindObjects(FindObjectsRequest) returns (FindObjectsResponse) {}
  // FindObjectsFinal finishes a search for token and session objects.
  rpc FindObjectsFinal(FindObjectsFinalRequest)
      returns (FindObjectsFinalResponse) {}
  // EncryptInit initializes an encryption operation.
  rpc EncryptInit(EncryptInitRequest) returns (EncryptInitResponse) {}
  // Encrypt encrypts single-part data.
  rpc Encrypt(EncryptRequest) returns (EncryptResponse) {}
  // EncryptUpdate continues a multiple-part encryption operation.
  rpc EncryptUpdate(EncryptUpdateRequest) returns (EncryptUpdateResponse) {}
  // EncryptFinal finishes a multiple-part encryption operation.
  rpc EncryptFinal(EncryptFinalRequest) returns (EncryptFinalResponse) {}
  // DecryptInit initializes a decryption operation.
  rpc DecryptInit(DecryptInitRequest) returns (DecryptInitResponse) {}
  // Decrypt decrypts encrypted data in a single part.
  rpc Decrypt(DecryptRequest) returns (DecryptResponse) {}
  // DecryptUpdate continues a multiple-part decryption operation.
  rpc DecryptUpdate(DecryptUpdateRequest) returns (DecryptUpdateResponse) {}
  // DecryptFinal finishes a multiple-part decryption operation.
  rpc DecryptFinal(DecryptFinalRequest) returns (DecryptFinalResponse) {}
  // DigestInit initializes a message-digesting operation.
  rpc DigestInit(DigestInitRequest) returns (DigestInitResponse) {}
  // Digest digests message in a single part.
  rpc Digest(DigestRequest) returns (DigestResponse) {}
  // DigestUpdate continues a multiple-part message-digesting operation.
  rpc DigestUpdate(DigestUpdateRequest) returns (DigestUpdateResponse) {}
  // DigestKey continues a multi-part message-digesting
  // operation, by digesting the value of a secret key as part of
  // the data already digested.
  rpc DigestKey(DigestKeyRequest) returns (DigestKeyResponse) {}
  // DigestFinal finishes a multiple-part message-digesting operation.
  rpc DigestFinal(DigestFinalRequest) returns (DigestFinalResponse) {}
  // SignInit initializes a signature (private key encryption)
  // operation, where the signature is (will be) an appendix to
  // the data, and plaintext cannot be recovered from the signature.
  rpc SignInit(SignInitRequest) returns (SignInitResponse) {}
  // Sign signs (encrypts with private key) data in a single part, where the
  // signature is (will be) an appendix to the data, and plaintext cannot be
  // recovered from the signature.
  rpc Sign(SignRequest) returns (SignResponse) {}
  // SignUpdate continues a multiple-part signature operation,
  // where the signature is (will be) an appendix to the data,
  // and plaintext cannot be recovered from the signature.
  rpc SignUpdate(SignUpdateRequest) returns (SignUpdateResponse) {}
  // SignFinal finishes a multiple-part signature operation returning the
  // signature.
  rpc SignFinal(SignFinalRequest) returns (SignFinalResponse) {}
  // SignRecoverInit initializes a signature operation, where the data can be
  // recovered from the signature.
  rpc SignRecoverInit(SignRecoverInitRequest)
      returns (SignRecoverInitResponse) {}
  // SignRecover signs data in a single operation, where the data can be
  // recovered from the signature.
  rpc SignRecover(SignRecoverRequest) returns (SignRecoverResponse) {}
  // VerifyInit initializes a verification operation, where the
  // signature is an appendix to the data, and plaintext cannot
  // be recovered from the signature (e.g. DSA).
  rpc VerifyInit(VerifyInitRequest) returns (VerifyInitResponse) {}
  // Verify verifies a signature in a single-part operation,
  // where the signature is an appendix to the data, and plaintext
  // cannot be recovered from the signature.
  rpc Verify(VerifyRequest) returns (VerifyResponse) {}
  // VerifyUpdate continues a multiple-part verification
  // operation, where the signature is an appendix to the data,
  // and plaintext cannot be recovered from the signature.
  rpc VerifyUpdate(VerifyUpdateRequest) returns (VerifyUpdateResponse) {}
  // VerifyFinal finishes a multiple-part verification
  // operation, checking the signature.
  rpc VerifyFinal(VerifyFinalRequest) returns (VerifyFinalResponse) {}
  // VerifyRecoverInit initializes a signature verification
  // operation, where the data is recovered from the signature.
  rpc VerifyRecoverInit(VerifyRecoverInitRequest)
      returns (VerifyRecoverInitResponse) {}
  // VerifyRecover verifies a signature in a single-part
  // operation, where the data is recovered from the signature.
  rpc VerifyRecover(VerifyRecoverRequest) returns (VerifyRecoverResponse) {}
  // DigestEncryptUpdate continues a multiple-part digesting and encryption
  // operation.
  rpc DigestEncryptUpdate(DigestEncryptUpdateRequest)
      returns (DigestEncryptUpdateResponse) {}
  // DecryptDigestUpdate continues a multiple-part decryption and digesting
  // operation.
  rpc DecryptDigestUpdate(DecryptDigestUpdateRequest)
      returns (DecryptDigestUpdateResponse) {}
  // SignEncryptUpdate continues a multiple-part signing and encryption
  // operation.
  rpc SignEncryptUpdate(SignEncryptUpdateRequest)
      returns (SignEncryptUpdateResponse) {}
  // DecryptVerifyUpdate continues a multiple-part decryption and verify
  // operation.
  rpc DecryptVerifyUpdate(DecryptVerifyUpdateRequest)
      returns (DecryptVerifyUpdateResponse) {}
  // GenerateKey generates a secret key, creating a new key object.
  rpc GenerateKey(GenerateKeyRequest) returns (GenerateKeyResponse) {}
  // GenerateKeyPair generates a public-key/private-key pair creating new key
  // objects.
  rpc GenerateKeyPair(GenerateKeyPairRequest)
      returns (GenerateKeyPairResponse) {}
  // WrapKey wraps (i.e., encrypts) a key.
  rpc WrapKey(WrapKeyRequest) returns (WrapKeyResponse) {}
  // UnwrapKey unwraps (decrypts) a wrapped key, creating a new key object.
  rpc UnwrapKey(UnwrapKeyRequest) returns (UnwrapKeyResponse) {}
  // DeriveKey derives a key from a base key, creating a new key object.
  rpc DeriveKey(DeriveKeyRequest) returns (DeriveKeyResponse) {}
  // SeedRandom mixes additional seed material into the token's
  // random number generator.
  rpc SeedRandom(SeedRandomRequest) returns (SeedRandomResponse) {}
  // GenerateRandom generates random data.
  rpc GenerateRandom(GenerateRandomRequest) returns (GenerateRandomResponse) {}
  // WaitForSlotEvent returns a channel which returns a slot event
  // (token insertion, removal, etc.) when it occurs.
  rpc WaitForSlotEvent(WaitForSlotEventRequest) returns (WaitForSlotEventResponse) {}
}

message WaitForSlotEventResponse {
  uint64 slotID = 1;
}
message WaitForSlotEventRequest {
  string ctx = 1;
  uint64 flags = 2;
}
message GenerateRandomResponse { bytes data = 1; }
message GenerateRandomRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  uint64 length = 3;
}
message SeedRandomResponse {}
message SeedRandomRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes seed = 3;
}
message DeriveKeyResponse { uint64 handle_id = 1; }
message DeriveKeyRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  uint64 handle_id = 4;
  repeated Attribute attributes = 5;
}
message UnwrapKeyResponse { uint64 handle_id = 1; }
message UnwrapKeyRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  uint64 wrapping_handle_id = 4;
  bytes wrapped_key = 5;
  repeated Attribute attributes = 6;
}
message WrapKeyResponse { bytes wrapped_key = 1; }
message WrapKeyRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  uint64 wrapping_handle_id = 4;
  uint64 handle_id = 5;
}
message GenerateKeyPairResponse {
  uint64 public_key_handle_id = 1;
  uint64 private_key_handle_id = 3;
}
message GenerateKeyPairRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  repeated Attribute public_attributes = 4;
  repeated Attribute private_attributes = 5;
}
message GenerateKeyResponse { uint64 handle_id = 1; }
message GenerateKeyRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  repeated Attribute attributes = 4;
}
message DecryptVerifyUpdateResponse { bytes plain = 1; }
message DecryptVerifyUpdateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes encrypted = 3;
}
message SignEncryptUpdateResponse { bytes signature = 1; }
message SignEncryptUpdateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
}
message DecryptDigestUpdateResponse { bytes encrypted = 1; }
message DecryptDigestUpdateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
}
message DigestEncryptUpdateResponse { bytes hashed = 1; }
message DigestEncryptUpdateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
}
message VerifyRecoverResponse { bytes data = 1; }
message VerifyRecoverRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes signature = 3;
}
message VerifyRecoverInitResponse {}
message VerifyRecoverInitRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  uint64 handle_id = 4;
}
message VerifyFinalResponse {}
message VerifyFinalRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes signature = 3;
}
message VerifyUpdateResponse {}
message VerifyUpdateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
}
message VerifyResponse {}
message VerifyRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
  bytes signature = 4;
}
message VerifyInitResponse {}
message VerifyInitRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  uint64 handle_id = 4;
}
message SignRecoverResponse { bytes signature = 1; }
message SignRecoverRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
}
message SignRecoverInitResponse {}
message SignRecoverInitRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  uint64 handle_id = 4;
}
message SignFinalResponse { bytes signature = 1; }
message SignFinalRequest {
  string ctx = 1;
  uint64 session_handle = 2;
}
message SignUpdateResponse {}
message SignUpdateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
}
message SignResponse { bytes signature = 1; }
message SignRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
}
message SignInitResponse {}
message SignInitRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  uint64 handle_id = 4;
}
message DigestFinalResponse { bytes hashed = 1; }
message DigestFinalRequest {
  string ctx = 1;
  uint64 session_handle = 2;
}
message DigestKeyResponse {}
message DigestKeyRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  uint64 handle_id = 3;
}
message DigestUpdateResponse { bytes hashed = 1; }
message DigestUpdateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
}
message DigestResponse { bytes hashed = 1; }
message DigestRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
}
message DigestInitResponse {}
message DigestInitRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
}
message DecryptFinalResponse { bytes plain = 1; }
message DecryptFinalRequest {
  string ctx = 1;
  uint64 session_handle = 2;
}
message DecryptUpdateResponse { bytes plain = 1; }
message DecryptUpdateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes encrypted = 3;
}
message DecryptResponse { bytes plain = 1; }
message DecryptRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes encrypted = 3;
}
message DecryptInitResponse {}
message DecryptInitRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  uint64 handle_id = 4;
}
message EncryptFinalResponse { bytes encrypted = 1; }
message EncryptFinalRequest {
  string ctx = 1;
  uint64 session_handle = 2;
}
message EncryptUpdateResponse { bytes encrypted = 1; }
message EncryptUpdateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes message = 3;
}
message EncryptResponse { bytes encrypted = 1; }
message EncryptRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes plain = 3;
}
message EncryptInitResponse {}
message EncryptInitRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Mechanism mechanisms = 3;
  uint64 handle_id = 4;
}
message FindObjectsFinalResponse {}
message FindObjectsFinalRequest {
  string ctx = 1;
  uint64 session_handle = 2;
}
message FindObjectsResponse {
  repeated uint64 handle_ids = 1;
  bool has_more = 2;
}
message FindObjectsRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  uint64 max = 3;
}
message FindObjectsInitResponse {}
message FindObjectsInitRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Attribute attributes = 3;
}
message SetAttributeValueResponse {}
message SetAttributeValueRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  uint64 handle_id = 3;
  repeated Attribute attributes = 4;
}
message GetAttributeValueResponse { repeated Attribute attributes = 1; }
message GetAttributeValueRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  uint64 handle_id = 3;
  repeated Attribute attributes = 4;
}
message GetObjectSizeResponse { uint64 size = 1; }
message GetObjectSizeRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  uint64 handle_id = 3;
  repeated Attribute attributes = 4;
}
message DestroyObjectResponse {}
message DestroyObjectRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  uint64 handle_id = 3;
}
message CopyObjectResponse { uint64 handle_id = 1; }
message CopyObjectRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  uint64 handle_id = 3;
  repeated Attribute attributes = 4;
}
message CreateObjectResponse { uint64 handle_id = 1; }
message CreateObjectRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  repeated Attribute attributes = 3;
}
message LogoutResponse {}
message LogoutRequest {
  string ctx = 1;
  uint64 session_handle = 2;
}
message LoginResponse {}
message LoginRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  uint64 user_type = 3;
  string pin = 4;
}
message SetOperationStateResponse {}
message SetOperationStateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  bytes state = 3;
  uint64 encrypt_key = 4;
  uint64 auth_key = 5;
}
message GetOperationStateResponse { bytes state = 1; }
message GetOperationStateRequest {
  string ctx = 1;
  uint64 session_handle = 2;
}
message GetSessionInfoResponse { SessionInfo info = 1; }
message GetSessionInfoRequest {
  string ctx = 1;
  uint64 session_handle = 2;
}
message CloseAllSessionsResponse {}
message CloseAllSessionsRequest {
  string ctx = 1;
  uint64 slot_id = 2;
}
message CloseSessionResponse {}
message CloseSessionRequest {
  string ctx = 1;
  uint64 session_handle = 2;
}
message OpenSessionResponse { uint64 session_handle = 1; }
message OpenSessionRequest {
  string ctx = 1;
  uint64 slot_id = 2;
  uint64 flags = 3;
}
message SetPINResponse {}
message SetPINRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  string old_pin = 3;
  string new_pin = 4;
}
message InitPINResponse {}
message InitPINRequest {
  string ctx = 1;
  uint64 session_handle = 2;
  string pin = 3;
}
message InitTokenResponse {}
message InitTokenRequest {
  string ctx = 1;
  uint64 slot_id = 2;
  string pin = 3;
  string label = 4;
}
message GetMechanismInfoResponse { MechanismInfo info = 1; }
message GetMechanismInfoRequest {
  string ctx = 1;
  uint64 slot_id = 2;
  repeated Mechanism mechanisms = 3;
}
message GetMechanismListResponse { repeated Mechanism mechanisms = 1; }
message GetMechanismListRequest {
  string ctx = 1;
  uint64 slot_id = 2;
}
message GetTokenInfoResponse { TokenInfo info = 1; }
message GetTokenInfoRequest {
  string ctx = 1;
  uint64 slot_id = 2;
}

message GetSlotInfoResponse { SlotInfo info = 1; }
message GetSlotInfoRequest {
  string ctx = 1;
  uint64 slot_id = 2;
}
message GetSlotListResponse { repeated uint64 slot_ids = 1; }
message GetSlotListRequest {
  string ctx = 1;
  bool token_present = 2;
}
message InitializeRequest { string ctx = 1; }
message InitializeResponse {}
message FinalizeRequest { string ctx = 1; }
message FinalizeResponse {}
message GetInfoRequest { string ctx = 1; }
message GetInfoResponse { Info info = 1; }
message DestroyRequest { string ctx = 1; }
message ErrorAwareResponse {}
message NewRequest { string module = 1; }
message NewResponse { string ctx = 1; }

message EmptyRequest {}
message EmptyResponse {}

message Version {
  uint32 Major = 1;
  uint32 Minor = 2;
}

message Info {
  Version CryptokiVersion = 1;
  string ManufacturerID = 2;
  uint64 Flags = 3;
  string LibraryDescription = 4;
  Version LibraryVersion = 5;
}

message SlotInfo {
  string SlotDescription = 1;
  string ManufacturerID = 2;
  uint64 Flags = 3;
  Version HardwareVersion = 4;
  Version FirmwareVersion = 5;
}

message TokenInfo {
  string Label = 1;
  string ManufacturerID = 2;
  string Model = 3;
  string SerialNumber = 4;
  uint64 Flags = 5;
  uint64 MaxSessionCount = 6;
  uint64 SessionCount = 7;
  uint64 MaxRwSessionCount = 8;
  uint64 RwSessionCount = 9;
  uint64 MaxPinLen = 10;
  uint64 MinPinLen = 11;
  uint64 TotalPublicMemory = 12;
  uint64 FreePublicMemory = 13;
  uint64 TotalPrivateMemory = 14;
  uint64 FreePrivateMemory = 15;
  Version HardwareVersion = 16;
  Version FirmwareVersion = 17;
  string UTCTime = 18;
}

message Mechanism {
  uint64 Mechanism = 1;
  optional bytes Parameter = 2;
  google.protobuf.Any generator = 3;
}

message MechanismInfo {
  uint64 MinKeySize = 1;
  uint64 MaxKeySize = 2;
  uint64 Flags = 3;
}

message SessionInfo {
  uint64 SlotID = 1;
  uint64 State = 2;
  uint64 Flags = 3;
  uint64 DeviceError = 4;
}

message Attribute {
  uint64 Type = 1;
  bytes Value = 2;
}

message SlotEvent { uint64 SlotID = 1; }