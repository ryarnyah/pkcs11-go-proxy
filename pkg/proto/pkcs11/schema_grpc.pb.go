// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pkcs11

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PKCS11Client is the client API for PKCS11 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PKCS11Client interface {
	// New creates a new context and initializes the module/library for use.
	New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*NewResponse, error)
	// Destroy unloads the module/library and frees any remaining memory.
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Initialize initializes the Cryptoki library.
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	// Finalize indicates that an application is done with the Cryptoki library.
	Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*FinalizeResponse, error)
	// GetInfo returns general information about Cryptoki.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// GetSlotList obtains a list of slots in the system.
	GetSlotList(ctx context.Context, in *GetSlotListRequest, opts ...grpc.CallOption) (*GetSlotListResponse, error)
	// GetSlotInfo obtains information about a particular slot in the system.
	GetSlotInfo(ctx context.Context, in *GetSlotInfoRequest, opts ...grpc.CallOption) (*GetSlotInfoResponse, error)
	// GetTokenInfo obtains information about a particular token
	// in the system.
	GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoResponse, error)
	// GetMechanismList obtains a list of mechanism types supported by a token.
	GetMechanismList(ctx context.Context, in *GetMechanismListRequest, opts ...grpc.CallOption) (*GetMechanismListResponse, error)
	// GetMechanismInfo obtains information about a particular
	// mechanism possibly supported by a token.
	GetMechanismInfo(ctx context.Context, in *GetMechanismInfoRequest, opts ...grpc.CallOption) (*GetMechanismInfoResponse, error)
	// InitToken initializes a token. The label must be 32 characters
	// long, it is blank padded if it is not. If it is longer it is capped
	// to 32 characters.
	InitToken(ctx context.Context, in *InitTokenRequest, opts ...grpc.CallOption) (*InitTokenResponse, error)
	// InitPIN initializes the normal user's PIN.
	InitPIN(ctx context.Context, in *InitPINRequest, opts ...grpc.CallOption) (*InitPINResponse, error)
	// SetPIN modifies the PIN of the user who is logged in.
	SetPIN(ctx context.Context, in *SetPINRequest, opts ...grpc.CallOption) (*SetPINResponse, error)
	// OpenSession opens a session between an application and a token.
	OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionResponse, error)
	// CloseSession closes a session between an application and a token.
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error)
	// CloseAllSessions closes all sessions with a token.
	CloseAllSessions(ctx context.Context, in *CloseAllSessionsRequest, opts ...grpc.CallOption) (*CloseAllSessionsResponse, error)
	// GetSessionInfo obtains information about the session.
	GetSessionInfo(ctx context.Context, in *GetSessionInfoRequest, opts ...grpc.CallOption) (*GetSessionInfoResponse, error)
	// GetOperationState obtains the state of the cryptographic operation in a
	// session.
	GetOperationState(ctx context.Context, in *GetOperationStateRequest, opts ...grpc.CallOption) (*GetOperationStateResponse, error)
	// SetOperationState restores the state of the cryptographic operation in a
	// session.
	SetOperationState(ctx context.Context, in *SetOperationStateRequest, opts ...grpc.CallOption) (*SetOperationStateResponse, error)
	// Login logs a user into a token.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Logout logs a user out from a token.
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// CreateObject creates a new object.
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error)
	// CopyObject copies an object, creating a new object for the copy.
	CopyObject(ctx context.Context, in *CopyObjectRequest, opts ...grpc.CallOption) (*CopyObjectResponse, error)
	// DestroyObject destroys an object.
	DestroyObject(ctx context.Context, in *DestroyObjectRequest, opts ...grpc.CallOption) (*DestroyObjectResponse, error)
	// GetObjectSize gets the size of an object in bytes.
	GetObjectSize(ctx context.Context, in *GetObjectSizeRequest, opts ...grpc.CallOption) (*GetObjectSizeResponse, error)
	// GetAttributeValue obtains the value of one or more object attributes.
	GetAttributeValue(ctx context.Context, in *GetAttributeValueRequest, opts ...grpc.CallOption) (*GetAttributeValueResponse, error)
	// SetAttributeValue modifies the value of one or more object attributes
	SetAttributeValue(ctx context.Context, in *SetAttributeValueRequest, opts ...grpc.CallOption) (*SetAttributeValueResponse, error)
	// FindObjectsInit initializes a search for token and session
	// objects that match a template.
	FindObjectsInit(ctx context.Context, in *FindObjectsInitRequest, opts ...grpc.CallOption) (*FindObjectsInitResponse, error)
	// FindObjects continues a search for token and session
	// objects that match a template, obtaining additional object
	// handles. Calling the function repeatedly may yield additional results until
	// an empty slice is returned.
	//
	// The returned boolean value is deprecated and should be ignored.
	FindObjects(ctx context.Context, in *FindObjectsRequest, opts ...grpc.CallOption) (*FindObjectsResponse, error)
	// FindObjectsFinal finishes a search for token and session objects.
	FindObjectsFinal(ctx context.Context, in *FindObjectsFinalRequest, opts ...grpc.CallOption) (*FindObjectsFinalResponse, error)
	// EncryptInit initializes an encryption operation.
	EncryptInit(ctx context.Context, in *EncryptInitRequest, opts ...grpc.CallOption) (*EncryptInitResponse, error)
	// Encrypt encrypts single-part data.
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error)
	// EncryptUpdate continues a multiple-part encryption operation.
	EncryptUpdate(ctx context.Context, in *EncryptUpdateRequest, opts ...grpc.CallOption) (*EncryptUpdateResponse, error)
	// EncryptFinal finishes a multiple-part encryption operation.
	EncryptFinal(ctx context.Context, in *EncryptFinalRequest, opts ...grpc.CallOption) (*EncryptFinalResponse, error)
	// DecryptInit initializes a decryption operation.
	DecryptInit(ctx context.Context, in *DecryptInitRequest, opts ...grpc.CallOption) (*DecryptInitResponse, error)
	// Decrypt decrypts encrypted data in a single part.
	Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error)
	// DecryptUpdate continues a multiple-part decryption operation.
	DecryptUpdate(ctx context.Context, in *DecryptUpdateRequest, opts ...grpc.CallOption) (*DecryptUpdateResponse, error)
	// DecryptFinal finishes a multiple-part decryption operation.
	DecryptFinal(ctx context.Context, in *DecryptFinalRequest, opts ...grpc.CallOption) (*DecryptFinalResponse, error)
	// DigestInit initializes a message-digesting operation.
	DigestInit(ctx context.Context, in *DigestInitRequest, opts ...grpc.CallOption) (*DigestInitResponse, error)
	// Digest digests message in a single part.
	Digest(ctx context.Context, in *DigestRequest, opts ...grpc.CallOption) (*DigestResponse, error)
	// DigestUpdate continues a multiple-part message-digesting operation.
	DigestUpdate(ctx context.Context, in *DigestUpdateRequest, opts ...grpc.CallOption) (*DigestUpdateResponse, error)
	// DigestKey continues a multi-part message-digesting
	// operation, by digesting the value of a secret key as part of
	// the data already digested.
	DigestKey(ctx context.Context, in *DigestKeyRequest, opts ...grpc.CallOption) (*DigestKeyResponse, error)
	// DigestFinal finishes a multiple-part message-digesting operation.
	DigestFinal(ctx context.Context, in *DigestFinalRequest, opts ...grpc.CallOption) (*DigestFinalResponse, error)
	// SignInit initializes a signature (private key encryption)
	// operation, where the signature is (will be) an appendix to
	// the data, and plaintext cannot be recovered from the signature.
	SignInit(ctx context.Context, in *SignInitRequest, opts ...grpc.CallOption) (*SignInitResponse, error)
	// Sign signs (encrypts with private key) data in a single part, where the
	// signature is (will be) an appendix to the data, and plaintext cannot be
	// recovered from the signature.
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
	// SignUpdate continues a multiple-part signature operation,
	// where the signature is (will be) an appendix to the data,
	// and plaintext cannot be recovered from the signature.
	SignUpdate(ctx context.Context, in *SignUpdateRequest, opts ...grpc.CallOption) (*SignUpdateResponse, error)
	// SignFinal finishes a multiple-part signature operation returning the
	// signature.
	SignFinal(ctx context.Context, in *SignFinalRequest, opts ...grpc.CallOption) (*SignFinalResponse, error)
	// SignRecoverInit initializes a signature operation, where the data can be
	// recovered from the signature.
	SignRecoverInit(ctx context.Context, in *SignRecoverInitRequest, opts ...grpc.CallOption) (*SignRecoverInitResponse, error)
	// SignRecover signs data in a single operation, where the data can be
	// recovered from the signature.
	SignRecover(ctx context.Context, in *SignRecoverRequest, opts ...grpc.CallOption) (*SignRecoverResponse, error)
	// VerifyInit initializes a verification operation, where the
	// signature is an appendix to the data, and plaintext cannot
	// be recovered from the signature (e.g. DSA).
	VerifyInit(ctx context.Context, in *VerifyInitRequest, opts ...grpc.CallOption) (*VerifyInitResponse, error)
	// Verify verifies a signature in a single-part operation,
	// where the signature is an appendix to the data, and plaintext
	// cannot be recovered from the signature.
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	// VerifyUpdate continues a multiple-part verification
	// operation, where the signature is an appendix to the data,
	// and plaintext cannot be recovered from the signature.
	VerifyUpdate(ctx context.Context, in *VerifyUpdateRequest, opts ...grpc.CallOption) (*VerifyUpdateResponse, error)
	// VerifyFinal finishes a multiple-part verification
	// operation, checking the signature.
	VerifyFinal(ctx context.Context, in *VerifyFinalRequest, opts ...grpc.CallOption) (*VerifyFinalResponse, error)
	// VerifyRecoverInit initializes a signature verification
	// operation, where the data is recovered from the signature.
	VerifyRecoverInit(ctx context.Context, in *VerifyRecoverInitRequest, opts ...grpc.CallOption) (*VerifyRecoverInitResponse, error)
	// VerifyRecover verifies a signature in a single-part
	// operation, where the data is recovered from the signature.
	VerifyRecover(ctx context.Context, in *VerifyRecoverRequest, opts ...grpc.CallOption) (*VerifyRecoverResponse, error)
	// DigestEncryptUpdate continues a multiple-part digesting and encryption
	// operation.
	DigestEncryptUpdate(ctx context.Context, in *DigestEncryptUpdateRequest, opts ...grpc.CallOption) (*DigestEncryptUpdateResponse, error)
	// DecryptDigestUpdate continues a multiple-part decryption and digesting
	// operation.
	DecryptDigestUpdate(ctx context.Context, in *DecryptDigestUpdateRequest, opts ...grpc.CallOption) (*DecryptDigestUpdateResponse, error)
	// SignEncryptUpdate continues a multiple-part signing and encryption
	// operation.
	SignEncryptUpdate(ctx context.Context, in *SignEncryptUpdateRequest, opts ...grpc.CallOption) (*SignEncryptUpdateResponse, error)
	// DecryptVerifyUpdate continues a multiple-part decryption and verify
	// operation.
	DecryptVerifyUpdate(ctx context.Context, in *DecryptVerifyUpdateRequest, opts ...grpc.CallOption) (*DecryptVerifyUpdateResponse, error)
	// GenerateKey generates a secret key, creating a new key object.
	GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...grpc.CallOption) (*GenerateKeyResponse, error)
	// GenerateKeyPair generates a public-key/private-key pair creating new key
	// objects.
	GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error)
	// WrapKey wraps (i.e., encrypts) a key.
	WrapKey(ctx context.Context, in *WrapKeyRequest, opts ...grpc.CallOption) (*WrapKeyResponse, error)
	// UnwrapKey unwraps (decrypts) a wrapped key, creating a new key object.
	UnwrapKey(ctx context.Context, in *UnwrapKeyRequest, opts ...grpc.CallOption) (*UnwrapKeyResponse, error)
	// DeriveKey derives a key from a base key, creating a new key object.
	DeriveKey(ctx context.Context, in *DeriveKeyRequest, opts ...grpc.CallOption) (*DeriveKeyResponse, error)
	// SeedRandom mixes additional seed material into the token's
	// random number generator.
	SeedRandom(ctx context.Context, in *SeedRandomRequest, opts ...grpc.CallOption) (*SeedRandomResponse, error)
	// GenerateRandom generates random data.
	GenerateRandom(ctx context.Context, in *GenerateRandomRequest, opts ...grpc.CallOption) (*GenerateRandomResponse, error)
	// WaitForSlotEvent returns a channel which returns a slot event
	// (token insertion, removal, etc.) when it occurs.
	WaitForSlotEvent(ctx context.Context, in *WaitForSlotEventRequest, opts ...grpc.CallOption) (*WaitForSlotEventResponse, error)
}

type pKCS11Client struct {
	cc grpc.ClientConnInterface
}

func NewPKCS11Client(cc grpc.ClientConnInterface) PKCS11Client {
	return &pKCS11Client{cc}
}

func (c *pKCS11Client) New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*NewResponse, error) {
	out := new(NewResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*FinalizeResponse, error) {
	out := new(FinalizeResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GetSlotList(ctx context.Context, in *GetSlotListRequest, opts ...grpc.CallOption) (*GetSlotListResponse, error) {
	out := new(GetSlotListResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GetSlotList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GetSlotInfo(ctx context.Context, in *GetSlotInfoRequest, opts ...grpc.CallOption) (*GetSlotInfoResponse, error) {
	out := new(GetSlotInfoResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GetSlotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoResponse, error) {
	out := new(GetTokenInfoResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GetTokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GetMechanismList(ctx context.Context, in *GetMechanismListRequest, opts ...grpc.CallOption) (*GetMechanismListResponse, error) {
	out := new(GetMechanismListResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GetMechanismList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GetMechanismInfo(ctx context.Context, in *GetMechanismInfoRequest, opts ...grpc.CallOption) (*GetMechanismInfoResponse, error) {
	out := new(GetMechanismInfoResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GetMechanismInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) InitToken(ctx context.Context, in *InitTokenRequest, opts ...grpc.CallOption) (*InitTokenResponse, error) {
	out := new(InitTokenResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/InitToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) InitPIN(ctx context.Context, in *InitPINRequest, opts ...grpc.CallOption) (*InitPINResponse, error) {
	out := new(InitPINResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/InitPIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) SetPIN(ctx context.Context, in *SetPINRequest, opts ...grpc.CallOption) (*SetPINResponse, error) {
	out := new(SetPINResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/SetPIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionResponse, error) {
	out := new(OpenSessionResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/OpenSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error) {
	out := new(CloseSessionResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) CloseAllSessions(ctx context.Context, in *CloseAllSessionsRequest, opts ...grpc.CallOption) (*CloseAllSessionsResponse, error) {
	out := new(CloseAllSessionsResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/CloseAllSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GetSessionInfo(ctx context.Context, in *GetSessionInfoRequest, opts ...grpc.CallOption) (*GetSessionInfoResponse, error) {
	out := new(GetSessionInfoResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GetSessionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GetOperationState(ctx context.Context, in *GetOperationStateRequest, opts ...grpc.CallOption) (*GetOperationStateResponse, error) {
	out := new(GetOperationStateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GetOperationState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) SetOperationState(ctx context.Context, in *SetOperationStateRequest, opts ...grpc.CallOption) (*SetOperationStateResponse, error) {
	out := new(SetOperationStateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/SetOperationState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error) {
	out := new(CreateObjectResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) CopyObject(ctx context.Context, in *CopyObjectRequest, opts ...grpc.CallOption) (*CopyObjectResponse, error) {
	out := new(CopyObjectResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/CopyObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DestroyObject(ctx context.Context, in *DestroyObjectRequest, opts ...grpc.CallOption) (*DestroyObjectResponse, error) {
	out := new(DestroyObjectResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DestroyObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GetObjectSize(ctx context.Context, in *GetObjectSizeRequest, opts ...grpc.CallOption) (*GetObjectSizeResponse, error) {
	out := new(GetObjectSizeResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GetObjectSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GetAttributeValue(ctx context.Context, in *GetAttributeValueRequest, opts ...grpc.CallOption) (*GetAttributeValueResponse, error) {
	out := new(GetAttributeValueResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GetAttributeValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) SetAttributeValue(ctx context.Context, in *SetAttributeValueRequest, opts ...grpc.CallOption) (*SetAttributeValueResponse, error) {
	out := new(SetAttributeValueResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/SetAttributeValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) FindObjectsInit(ctx context.Context, in *FindObjectsInitRequest, opts ...grpc.CallOption) (*FindObjectsInitResponse, error) {
	out := new(FindObjectsInitResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/FindObjectsInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) FindObjects(ctx context.Context, in *FindObjectsRequest, opts ...grpc.CallOption) (*FindObjectsResponse, error) {
	out := new(FindObjectsResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/FindObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) FindObjectsFinal(ctx context.Context, in *FindObjectsFinalRequest, opts ...grpc.CallOption) (*FindObjectsFinalResponse, error) {
	out := new(FindObjectsFinalResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/FindObjectsFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) EncryptInit(ctx context.Context, in *EncryptInitRequest, opts ...grpc.CallOption) (*EncryptInitResponse, error) {
	out := new(EncryptInitResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/EncryptInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error) {
	out := new(EncryptResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) EncryptUpdate(ctx context.Context, in *EncryptUpdateRequest, opts ...grpc.CallOption) (*EncryptUpdateResponse, error) {
	out := new(EncryptUpdateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/EncryptUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) EncryptFinal(ctx context.Context, in *EncryptFinalRequest, opts ...grpc.CallOption) (*EncryptFinalResponse, error) {
	out := new(EncryptFinalResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/EncryptFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DecryptInit(ctx context.Context, in *DecryptInitRequest, opts ...grpc.CallOption) (*DecryptInitResponse, error) {
	out := new(DecryptInitResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DecryptInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error) {
	out := new(DecryptResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DecryptUpdate(ctx context.Context, in *DecryptUpdateRequest, opts ...grpc.CallOption) (*DecryptUpdateResponse, error) {
	out := new(DecryptUpdateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DecryptUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DecryptFinal(ctx context.Context, in *DecryptFinalRequest, opts ...grpc.CallOption) (*DecryptFinalResponse, error) {
	out := new(DecryptFinalResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DecryptFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DigestInit(ctx context.Context, in *DigestInitRequest, opts ...grpc.CallOption) (*DigestInitResponse, error) {
	out := new(DigestInitResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DigestInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) Digest(ctx context.Context, in *DigestRequest, opts ...grpc.CallOption) (*DigestResponse, error) {
	out := new(DigestResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/Digest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DigestUpdate(ctx context.Context, in *DigestUpdateRequest, opts ...grpc.CallOption) (*DigestUpdateResponse, error) {
	out := new(DigestUpdateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DigestUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DigestKey(ctx context.Context, in *DigestKeyRequest, opts ...grpc.CallOption) (*DigestKeyResponse, error) {
	out := new(DigestKeyResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DigestKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DigestFinal(ctx context.Context, in *DigestFinalRequest, opts ...grpc.CallOption) (*DigestFinalResponse, error) {
	out := new(DigestFinalResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DigestFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) SignInit(ctx context.Context, in *SignInitRequest, opts ...grpc.CallOption) (*SignInitResponse, error) {
	out := new(SignInitResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/SignInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) SignUpdate(ctx context.Context, in *SignUpdateRequest, opts ...grpc.CallOption) (*SignUpdateResponse, error) {
	out := new(SignUpdateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/SignUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) SignFinal(ctx context.Context, in *SignFinalRequest, opts ...grpc.CallOption) (*SignFinalResponse, error) {
	out := new(SignFinalResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/SignFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) SignRecoverInit(ctx context.Context, in *SignRecoverInitRequest, opts ...grpc.CallOption) (*SignRecoverInitResponse, error) {
	out := new(SignRecoverInitResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/SignRecoverInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) SignRecover(ctx context.Context, in *SignRecoverRequest, opts ...grpc.CallOption) (*SignRecoverResponse, error) {
	out := new(SignRecoverResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/SignRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) VerifyInit(ctx context.Context, in *VerifyInitRequest, opts ...grpc.CallOption) (*VerifyInitResponse, error) {
	out := new(VerifyInitResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/VerifyInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) VerifyUpdate(ctx context.Context, in *VerifyUpdateRequest, opts ...grpc.CallOption) (*VerifyUpdateResponse, error) {
	out := new(VerifyUpdateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/VerifyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) VerifyFinal(ctx context.Context, in *VerifyFinalRequest, opts ...grpc.CallOption) (*VerifyFinalResponse, error) {
	out := new(VerifyFinalResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/VerifyFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) VerifyRecoverInit(ctx context.Context, in *VerifyRecoverInitRequest, opts ...grpc.CallOption) (*VerifyRecoverInitResponse, error) {
	out := new(VerifyRecoverInitResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/VerifyRecoverInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) VerifyRecover(ctx context.Context, in *VerifyRecoverRequest, opts ...grpc.CallOption) (*VerifyRecoverResponse, error) {
	out := new(VerifyRecoverResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/VerifyRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DigestEncryptUpdate(ctx context.Context, in *DigestEncryptUpdateRequest, opts ...grpc.CallOption) (*DigestEncryptUpdateResponse, error) {
	out := new(DigestEncryptUpdateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DigestEncryptUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DecryptDigestUpdate(ctx context.Context, in *DecryptDigestUpdateRequest, opts ...grpc.CallOption) (*DecryptDigestUpdateResponse, error) {
	out := new(DecryptDigestUpdateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DecryptDigestUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) SignEncryptUpdate(ctx context.Context, in *SignEncryptUpdateRequest, opts ...grpc.CallOption) (*SignEncryptUpdateResponse, error) {
	out := new(SignEncryptUpdateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/SignEncryptUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DecryptVerifyUpdate(ctx context.Context, in *DecryptVerifyUpdateRequest, opts ...grpc.CallOption) (*DecryptVerifyUpdateResponse, error) {
	out := new(DecryptVerifyUpdateResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DecryptVerifyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...grpc.CallOption) (*GenerateKeyResponse, error) {
	out := new(GenerateKeyResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GenerateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error) {
	out := new(GenerateKeyPairResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GenerateKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) WrapKey(ctx context.Context, in *WrapKeyRequest, opts ...grpc.CallOption) (*WrapKeyResponse, error) {
	out := new(WrapKeyResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/WrapKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) UnwrapKey(ctx context.Context, in *UnwrapKeyRequest, opts ...grpc.CallOption) (*UnwrapKeyResponse, error) {
	out := new(UnwrapKeyResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/UnwrapKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) DeriveKey(ctx context.Context, in *DeriveKeyRequest, opts ...grpc.CallOption) (*DeriveKeyResponse, error) {
	out := new(DeriveKeyResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/DeriveKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) SeedRandom(ctx context.Context, in *SeedRandomRequest, opts ...grpc.CallOption) (*SeedRandomResponse, error) {
	out := new(SeedRandomResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/SeedRandom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) GenerateRandom(ctx context.Context, in *GenerateRandomRequest, opts ...grpc.CallOption) (*GenerateRandomResponse, error) {
	out := new(GenerateRandomResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/GenerateRandom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCS11Client) WaitForSlotEvent(ctx context.Context, in *WaitForSlotEventRequest, opts ...grpc.CallOption) (*WaitForSlotEventResponse, error) {
	out := new(WaitForSlotEventResponse)
	err := c.cc.Invoke(ctx, "/PKCS11/WaitForSlotEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PKCS11Server is the server API for PKCS11 service.
// All implementations must embed UnimplementedPKCS11Server
// for forward compatibility
type PKCS11Server interface {
	// New creates a new context and initializes the module/library for use.
	New(context.Context, *NewRequest) (*NewResponse, error)
	// Destroy unloads the module/library and frees any remaining memory.
	Destroy(context.Context, *DestroyRequest) (*EmptyResponse, error)
	// Initialize initializes the Cryptoki library.
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	// Finalize indicates that an application is done with the Cryptoki library.
	Finalize(context.Context, *FinalizeRequest) (*FinalizeResponse, error)
	// GetInfo returns general information about Cryptoki.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// GetSlotList obtains a list of slots in the system.
	GetSlotList(context.Context, *GetSlotListRequest) (*GetSlotListResponse, error)
	// GetSlotInfo obtains information about a particular slot in the system.
	GetSlotInfo(context.Context, *GetSlotInfoRequest) (*GetSlotInfoResponse, error)
	// GetTokenInfo obtains information about a particular token
	// in the system.
	GetTokenInfo(context.Context, *GetTokenInfoRequest) (*GetTokenInfoResponse, error)
	// GetMechanismList obtains a list of mechanism types supported by a token.
	GetMechanismList(context.Context, *GetMechanismListRequest) (*GetMechanismListResponse, error)
	// GetMechanismInfo obtains information about a particular
	// mechanism possibly supported by a token.
	GetMechanismInfo(context.Context, *GetMechanismInfoRequest) (*GetMechanismInfoResponse, error)
	// InitToken initializes a token. The label must be 32 characters
	// long, it is blank padded if it is not. If it is longer it is capped
	// to 32 characters.
	InitToken(context.Context, *InitTokenRequest) (*InitTokenResponse, error)
	// InitPIN initializes the normal user's PIN.
	InitPIN(context.Context, *InitPINRequest) (*InitPINResponse, error)
	// SetPIN modifies the PIN of the user who is logged in.
	SetPIN(context.Context, *SetPINRequest) (*SetPINResponse, error)
	// OpenSession opens a session between an application and a token.
	OpenSession(context.Context, *OpenSessionRequest) (*OpenSessionResponse, error)
	// CloseSession closes a session between an application and a token.
	CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error)
	// CloseAllSessions closes all sessions with a token.
	CloseAllSessions(context.Context, *CloseAllSessionsRequest) (*CloseAllSessionsResponse, error)
	// GetSessionInfo obtains information about the session.
	GetSessionInfo(context.Context, *GetSessionInfoRequest) (*GetSessionInfoResponse, error)
	// GetOperationState obtains the state of the cryptographic operation in a
	// session.
	GetOperationState(context.Context, *GetOperationStateRequest) (*GetOperationStateResponse, error)
	// SetOperationState restores the state of the cryptographic operation in a
	// session.
	SetOperationState(context.Context, *SetOperationStateRequest) (*SetOperationStateResponse, error)
	// Login logs a user into a token.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Logout logs a user out from a token.
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// CreateObject creates a new object.
	CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error)
	// CopyObject copies an object, creating a new object for the copy.
	CopyObject(context.Context, *CopyObjectRequest) (*CopyObjectResponse, error)
	// DestroyObject destroys an object.
	DestroyObject(context.Context, *DestroyObjectRequest) (*DestroyObjectResponse, error)
	// GetObjectSize gets the size of an object in bytes.
	GetObjectSize(context.Context, *GetObjectSizeRequest) (*GetObjectSizeResponse, error)
	// GetAttributeValue obtains the value of one or more object attributes.
	GetAttributeValue(context.Context, *GetAttributeValueRequest) (*GetAttributeValueResponse, error)
	// SetAttributeValue modifies the value of one or more object attributes
	SetAttributeValue(context.Context, *SetAttributeValueRequest) (*SetAttributeValueResponse, error)
	// FindObjectsInit initializes a search for token and session
	// objects that match a template.
	FindObjectsInit(context.Context, *FindObjectsInitRequest) (*FindObjectsInitResponse, error)
	// FindObjects continues a search for token and session
	// objects that match a template, obtaining additional object
	// handles. Calling the function repeatedly may yield additional results until
	// an empty slice is returned.
	//
	// The returned boolean value is deprecated and should be ignored.
	FindObjects(context.Context, *FindObjectsRequest) (*FindObjectsResponse, error)
	// FindObjectsFinal finishes a search for token and session objects.
	FindObjectsFinal(context.Context, *FindObjectsFinalRequest) (*FindObjectsFinalResponse, error)
	// EncryptInit initializes an encryption operation.
	EncryptInit(context.Context, *EncryptInitRequest) (*EncryptInitResponse, error)
	// Encrypt encrypts single-part data.
	Encrypt(context.Context, *EncryptRequest) (*EncryptResponse, error)
	// EncryptUpdate continues a multiple-part encryption operation.
	EncryptUpdate(context.Context, *EncryptUpdateRequest) (*EncryptUpdateResponse, error)
	// EncryptFinal finishes a multiple-part encryption operation.
	EncryptFinal(context.Context, *EncryptFinalRequest) (*EncryptFinalResponse, error)
	// DecryptInit initializes a decryption operation.
	DecryptInit(context.Context, *DecryptInitRequest) (*DecryptInitResponse, error)
	// Decrypt decrypts encrypted data in a single part.
	Decrypt(context.Context, *DecryptRequest) (*DecryptResponse, error)
	// DecryptUpdate continues a multiple-part decryption operation.
	DecryptUpdate(context.Context, *DecryptUpdateRequest) (*DecryptUpdateResponse, error)
	// DecryptFinal finishes a multiple-part decryption operation.
	DecryptFinal(context.Context, *DecryptFinalRequest) (*DecryptFinalResponse, error)
	// DigestInit initializes a message-digesting operation.
	DigestInit(context.Context, *DigestInitRequest) (*DigestInitResponse, error)
	// Digest digests message in a single part.
	Digest(context.Context, *DigestRequest) (*DigestResponse, error)
	// DigestUpdate continues a multiple-part message-digesting operation.
	DigestUpdate(context.Context, *DigestUpdateRequest) (*DigestUpdateResponse, error)
	// DigestKey continues a multi-part message-digesting
	// operation, by digesting the value of a secret key as part of
	// the data already digested.
	DigestKey(context.Context, *DigestKeyRequest) (*DigestKeyResponse, error)
	// DigestFinal finishes a multiple-part message-digesting operation.
	DigestFinal(context.Context, *DigestFinalRequest) (*DigestFinalResponse, error)
	// SignInit initializes a signature (private key encryption)
	// operation, where the signature is (will be) an appendix to
	// the data, and plaintext cannot be recovered from the signature.
	SignInit(context.Context, *SignInitRequest) (*SignInitResponse, error)
	// Sign signs (encrypts with private key) data in a single part, where the
	// signature is (will be) an appendix to the data, and plaintext cannot be
	// recovered from the signature.
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	// SignUpdate continues a multiple-part signature operation,
	// where the signature is (will be) an appendix to the data,
	// and plaintext cannot be recovered from the signature.
	SignUpdate(context.Context, *SignUpdateRequest) (*SignUpdateResponse, error)
	// SignFinal finishes a multiple-part signature operation returning the
	// signature.
	SignFinal(context.Context, *SignFinalRequest) (*SignFinalResponse, error)
	// SignRecoverInit initializes a signature operation, where the data can be
	// recovered from the signature.
	SignRecoverInit(context.Context, *SignRecoverInitRequest) (*SignRecoverInitResponse, error)
	// SignRecover signs data in a single operation, where the data can be
	// recovered from the signature.
	SignRecover(context.Context, *SignRecoverRequest) (*SignRecoverResponse, error)
	// VerifyInit initializes a verification operation, where the
	// signature is an appendix to the data, and plaintext cannot
	// be recovered from the signature (e.g. DSA).
	VerifyInit(context.Context, *VerifyInitRequest) (*VerifyInitResponse, error)
	// Verify verifies a signature in a single-part operation,
	// where the signature is an appendix to the data, and plaintext
	// cannot be recovered from the signature.
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	// VerifyUpdate continues a multiple-part verification
	// operation, where the signature is an appendix to the data,
	// and plaintext cannot be recovered from the signature.
	VerifyUpdate(context.Context, *VerifyUpdateRequest) (*VerifyUpdateResponse, error)
	// VerifyFinal finishes a multiple-part verification
	// operation, checking the signature.
	VerifyFinal(context.Context, *VerifyFinalRequest) (*VerifyFinalResponse, error)
	// VerifyRecoverInit initializes a signature verification
	// operation, where the data is recovered from the signature.
	VerifyRecoverInit(context.Context, *VerifyRecoverInitRequest) (*VerifyRecoverInitResponse, error)
	// VerifyRecover verifies a signature in a single-part
	// operation, where the data is recovered from the signature.
	VerifyRecover(context.Context, *VerifyRecoverRequest) (*VerifyRecoverResponse, error)
	// DigestEncryptUpdate continues a multiple-part digesting and encryption
	// operation.
	DigestEncryptUpdate(context.Context, *DigestEncryptUpdateRequest) (*DigestEncryptUpdateResponse, error)
	// DecryptDigestUpdate continues a multiple-part decryption and digesting
	// operation.
	DecryptDigestUpdate(context.Context, *DecryptDigestUpdateRequest) (*DecryptDigestUpdateResponse, error)
	// SignEncryptUpdate continues a multiple-part signing and encryption
	// operation.
	SignEncryptUpdate(context.Context, *SignEncryptUpdateRequest) (*SignEncryptUpdateResponse, error)
	// DecryptVerifyUpdate continues a multiple-part decryption and verify
	// operation.
	DecryptVerifyUpdate(context.Context, *DecryptVerifyUpdateRequest) (*DecryptVerifyUpdateResponse, error)
	// GenerateKey generates a secret key, creating a new key object.
	GenerateKey(context.Context, *GenerateKeyRequest) (*GenerateKeyResponse, error)
	// GenerateKeyPair generates a public-key/private-key pair creating new key
	// objects.
	GenerateKeyPair(context.Context, *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error)
	// WrapKey wraps (i.e., encrypts) a key.
	WrapKey(context.Context, *WrapKeyRequest) (*WrapKeyResponse, error)
	// UnwrapKey unwraps (decrypts) a wrapped key, creating a new key object.
	UnwrapKey(context.Context, *UnwrapKeyRequest) (*UnwrapKeyResponse, error)
	// DeriveKey derives a key from a base key, creating a new key object.
	DeriveKey(context.Context, *DeriveKeyRequest) (*DeriveKeyResponse, error)
	// SeedRandom mixes additional seed material into the token's
	// random number generator.
	SeedRandom(context.Context, *SeedRandomRequest) (*SeedRandomResponse, error)
	// GenerateRandom generates random data.
	GenerateRandom(context.Context, *GenerateRandomRequest) (*GenerateRandomResponse, error)
	// WaitForSlotEvent returns a channel which returns a slot event
	// (token insertion, removal, etc.) when it occurs.
	WaitForSlotEvent(context.Context, *WaitForSlotEventRequest) (*WaitForSlotEventResponse, error)
	mustEmbedUnimplementedPKCS11Server()
}

// UnimplementedPKCS11Server must be embedded to have forward compatible implementations.
type UnimplementedPKCS11Server struct {
}

func (UnimplementedPKCS11Server) New(context.Context, *NewRequest) (*NewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (UnimplementedPKCS11Server) Destroy(context.Context, *DestroyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedPKCS11Server) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedPKCS11Server) Finalize(context.Context, *FinalizeRequest) (*FinalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}
func (UnimplementedPKCS11Server) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedPKCS11Server) GetSlotList(context.Context, *GetSlotListRequest) (*GetSlotListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotList not implemented")
}
func (UnimplementedPKCS11Server) GetSlotInfo(context.Context, *GetSlotInfoRequest) (*GetSlotInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotInfo not implemented")
}
func (UnimplementedPKCS11Server) GetTokenInfo(context.Context, *GetTokenInfoRequest) (*GetTokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenInfo not implemented")
}
func (UnimplementedPKCS11Server) GetMechanismList(context.Context, *GetMechanismListRequest) (*GetMechanismListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMechanismList not implemented")
}
func (UnimplementedPKCS11Server) GetMechanismInfo(context.Context, *GetMechanismInfoRequest) (*GetMechanismInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMechanismInfo not implemented")
}
func (UnimplementedPKCS11Server) InitToken(context.Context, *InitTokenRequest) (*InitTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitToken not implemented")
}
func (UnimplementedPKCS11Server) InitPIN(context.Context, *InitPINRequest) (*InitPINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPIN not implemented")
}
func (UnimplementedPKCS11Server) SetPIN(context.Context, *SetPINRequest) (*SetPINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPIN not implemented")
}
func (UnimplementedPKCS11Server) OpenSession(context.Context, *OpenSessionRequest) (*OpenSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSession not implemented")
}
func (UnimplementedPKCS11Server) CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedPKCS11Server) CloseAllSessions(context.Context, *CloseAllSessionsRequest) (*CloseAllSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAllSessions not implemented")
}
func (UnimplementedPKCS11Server) GetSessionInfo(context.Context, *GetSessionInfoRequest) (*GetSessionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionInfo not implemented")
}
func (UnimplementedPKCS11Server) GetOperationState(context.Context, *GetOperationStateRequest) (*GetOperationStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationState not implemented")
}
func (UnimplementedPKCS11Server) SetOperationState(context.Context, *SetOperationStateRequest) (*SetOperationStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperationState not implemented")
}
func (UnimplementedPKCS11Server) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPKCS11Server) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedPKCS11Server) CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedPKCS11Server) CopyObject(context.Context, *CopyObjectRequest) (*CopyObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyObject not implemented")
}
func (UnimplementedPKCS11Server) DestroyObject(context.Context, *DestroyObjectRequest) (*DestroyObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyObject not implemented")
}
func (UnimplementedPKCS11Server) GetObjectSize(context.Context, *GetObjectSizeRequest) (*GetObjectSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectSize not implemented")
}
func (UnimplementedPKCS11Server) GetAttributeValue(context.Context, *GetAttributeValueRequest) (*GetAttributeValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttributeValue not implemented")
}
func (UnimplementedPKCS11Server) SetAttributeValue(context.Context, *SetAttributeValueRequest) (*SetAttributeValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAttributeValue not implemented")
}
func (UnimplementedPKCS11Server) FindObjectsInit(context.Context, *FindObjectsInitRequest) (*FindObjectsInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindObjectsInit not implemented")
}
func (UnimplementedPKCS11Server) FindObjects(context.Context, *FindObjectsRequest) (*FindObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindObjects not implemented")
}
func (UnimplementedPKCS11Server) FindObjectsFinal(context.Context, *FindObjectsFinalRequest) (*FindObjectsFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindObjectsFinal not implemented")
}
func (UnimplementedPKCS11Server) EncryptInit(context.Context, *EncryptInitRequest) (*EncryptInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptInit not implemented")
}
func (UnimplementedPKCS11Server) Encrypt(context.Context, *EncryptRequest) (*EncryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedPKCS11Server) EncryptUpdate(context.Context, *EncryptUpdateRequest) (*EncryptUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptUpdate not implemented")
}
func (UnimplementedPKCS11Server) EncryptFinal(context.Context, *EncryptFinalRequest) (*EncryptFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptFinal not implemented")
}
func (UnimplementedPKCS11Server) DecryptInit(context.Context, *DecryptInitRequest) (*DecryptInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptInit not implemented")
}
func (UnimplementedPKCS11Server) Decrypt(context.Context, *DecryptRequest) (*DecryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedPKCS11Server) DecryptUpdate(context.Context, *DecryptUpdateRequest) (*DecryptUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptUpdate not implemented")
}
func (UnimplementedPKCS11Server) DecryptFinal(context.Context, *DecryptFinalRequest) (*DecryptFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptFinal not implemented")
}
func (UnimplementedPKCS11Server) DigestInit(context.Context, *DigestInitRequest) (*DigestInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigestInit not implemented")
}
func (UnimplementedPKCS11Server) Digest(context.Context, *DigestRequest) (*DigestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Digest not implemented")
}
func (UnimplementedPKCS11Server) DigestUpdate(context.Context, *DigestUpdateRequest) (*DigestUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigestUpdate not implemented")
}
func (UnimplementedPKCS11Server) DigestKey(context.Context, *DigestKeyRequest) (*DigestKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigestKey not implemented")
}
func (UnimplementedPKCS11Server) DigestFinal(context.Context, *DigestFinalRequest) (*DigestFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigestFinal not implemented")
}
func (UnimplementedPKCS11Server) SignInit(context.Context, *SignInitRequest) (*SignInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInit not implemented")
}
func (UnimplementedPKCS11Server) Sign(context.Context, *SignRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedPKCS11Server) SignUpdate(context.Context, *SignUpdateRequest) (*SignUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpdate not implemented")
}
func (UnimplementedPKCS11Server) SignFinal(context.Context, *SignFinalRequest) (*SignFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignFinal not implemented")
}
func (UnimplementedPKCS11Server) SignRecoverInit(context.Context, *SignRecoverInitRequest) (*SignRecoverInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignRecoverInit not implemented")
}
func (UnimplementedPKCS11Server) SignRecover(context.Context, *SignRecoverRequest) (*SignRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignRecover not implemented")
}
func (UnimplementedPKCS11Server) VerifyInit(context.Context, *VerifyInitRequest) (*VerifyInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyInit not implemented")
}
func (UnimplementedPKCS11Server) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedPKCS11Server) VerifyUpdate(context.Context, *VerifyUpdateRequest) (*VerifyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUpdate not implemented")
}
func (UnimplementedPKCS11Server) VerifyFinal(context.Context, *VerifyFinalRequest) (*VerifyFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyFinal not implemented")
}
func (UnimplementedPKCS11Server) VerifyRecoverInit(context.Context, *VerifyRecoverInitRequest) (*VerifyRecoverInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRecoverInit not implemented")
}
func (UnimplementedPKCS11Server) VerifyRecover(context.Context, *VerifyRecoverRequest) (*VerifyRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRecover not implemented")
}
func (UnimplementedPKCS11Server) DigestEncryptUpdate(context.Context, *DigestEncryptUpdateRequest) (*DigestEncryptUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigestEncryptUpdate not implemented")
}
func (UnimplementedPKCS11Server) DecryptDigestUpdate(context.Context, *DecryptDigestUpdateRequest) (*DecryptDigestUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptDigestUpdate not implemented")
}
func (UnimplementedPKCS11Server) SignEncryptUpdate(context.Context, *SignEncryptUpdateRequest) (*SignEncryptUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignEncryptUpdate not implemented")
}
func (UnimplementedPKCS11Server) DecryptVerifyUpdate(context.Context, *DecryptVerifyUpdateRequest) (*DecryptVerifyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptVerifyUpdate not implemented")
}
func (UnimplementedPKCS11Server) GenerateKey(context.Context, *GenerateKeyRequest) (*GenerateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKey not implemented")
}
func (UnimplementedPKCS11Server) GenerateKeyPair(context.Context, *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKeyPair not implemented")
}
func (UnimplementedPKCS11Server) WrapKey(context.Context, *WrapKeyRequest) (*WrapKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapKey not implemented")
}
func (UnimplementedPKCS11Server) UnwrapKey(context.Context, *UnwrapKeyRequest) (*UnwrapKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwrapKey not implemented")
}
func (UnimplementedPKCS11Server) DeriveKey(context.Context, *DeriveKeyRequest) (*DeriveKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveKey not implemented")
}
func (UnimplementedPKCS11Server) SeedRandom(context.Context, *SeedRandomRequest) (*SeedRandomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedRandom not implemented")
}
func (UnimplementedPKCS11Server) GenerateRandom(context.Context, *GenerateRandomRequest) (*GenerateRandomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRandom not implemented")
}
func (UnimplementedPKCS11Server) WaitForSlotEvent(context.Context, *WaitForSlotEventRequest) (*WaitForSlotEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForSlotEvent not implemented")
}
func (UnimplementedPKCS11Server) mustEmbedUnimplementedPKCS11Server() {}

// UnsafePKCS11Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PKCS11Server will
// result in compilation errors.
type UnsafePKCS11Server interface {
	mustEmbedUnimplementedPKCS11Server()
}

func RegisterPKCS11Server(s grpc.ServiceRegistrar, srv PKCS11Server) {
	s.RegisterService(&PKCS11_ServiceDesc, srv)
}

func _PKCS11_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).New(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).Finalize(ctx, req.(*FinalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GetSlotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GetSlotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GetSlotList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GetSlotList(ctx, req.(*GetSlotListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GetSlotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GetSlotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GetSlotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GetSlotInfo(ctx, req.(*GetSlotInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GetTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GetTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GetTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GetTokenInfo(ctx, req.(*GetTokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GetMechanismList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMechanismListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GetMechanismList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GetMechanismList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GetMechanismList(ctx, req.(*GetMechanismListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GetMechanismInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMechanismInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GetMechanismInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GetMechanismInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GetMechanismInfo(ctx, req.(*GetMechanismInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_InitToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).InitToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/InitToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).InitToken(ctx, req.(*InitTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_InitPIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitPINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).InitPIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/InitPIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).InitPIN(ctx, req.(*InitPINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_SetPIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).SetPIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/SetPIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).SetPIN(ctx, req.(*SetPINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).OpenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/OpenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).OpenSession(ctx, req.(*OpenSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_CloseAllSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseAllSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).CloseAllSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/CloseAllSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).CloseAllSessions(ctx, req.(*CloseAllSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GetSessionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GetSessionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GetSessionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GetSessionInfo(ctx, req.(*GetSessionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GetOperationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GetOperationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GetOperationState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GetOperationState(ctx, req.(*GetOperationStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_SetOperationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOperationStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).SetOperationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/SetOperationState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).SetOperationState(ctx, req.(*SetOperationStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_CopyObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).CopyObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/CopyObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).CopyObject(ctx, req.(*CopyObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DestroyObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DestroyObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DestroyObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DestroyObject(ctx, req.(*DestroyObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GetObjectSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GetObjectSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GetObjectSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GetObjectSize(ctx, req.(*GetObjectSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GetAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GetAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GetAttributeValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GetAttributeValue(ctx, req.(*GetAttributeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_SetAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAttributeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).SetAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/SetAttributeValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).SetAttributeValue(ctx, req.(*SetAttributeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_FindObjectsInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindObjectsInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).FindObjectsInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/FindObjectsInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).FindObjectsInit(ctx, req.(*FindObjectsInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_FindObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).FindObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/FindObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).FindObjects(ctx, req.(*FindObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_FindObjectsFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindObjectsFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).FindObjectsFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/FindObjectsFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).FindObjectsFinal(ctx, req.(*FindObjectsFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_EncryptInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).EncryptInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/EncryptInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).EncryptInit(ctx, req.(*EncryptInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_EncryptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).EncryptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/EncryptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).EncryptUpdate(ctx, req.(*EncryptUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_EncryptFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).EncryptFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/EncryptFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).EncryptFinal(ctx, req.(*EncryptFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DecryptInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DecryptInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DecryptInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DecryptInit(ctx, req.(*DecryptInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).Decrypt(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DecryptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DecryptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DecryptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DecryptUpdate(ctx, req.(*DecryptUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DecryptFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DecryptFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DecryptFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DecryptFinal(ctx, req.(*DecryptFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DigestInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigestInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DigestInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DigestInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DigestInit(ctx, req.(*DigestInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_Digest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).Digest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/Digest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).Digest(ctx, req.(*DigestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DigestUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigestUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DigestUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DigestUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DigestUpdate(ctx, req.(*DigestUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DigestKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigestKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DigestKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DigestKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DigestKey(ctx, req.(*DigestKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DigestFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigestFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DigestFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DigestFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DigestFinal(ctx, req.(*DigestFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_SignInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).SignInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/SignInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).SignInit(ctx, req.(*SignInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_SignUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).SignUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/SignUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).SignUpdate(ctx, req.(*SignUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_SignFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).SignFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/SignFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).SignFinal(ctx, req.(*SignFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_SignRecoverInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRecoverInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).SignRecoverInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/SignRecoverInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).SignRecoverInit(ctx, req.(*SignRecoverInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_SignRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).SignRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/SignRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).SignRecover(ctx, req.(*SignRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_VerifyInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).VerifyInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/VerifyInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).VerifyInit(ctx, req.(*VerifyInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_VerifyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).VerifyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/VerifyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).VerifyUpdate(ctx, req.(*VerifyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_VerifyFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).VerifyFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/VerifyFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).VerifyFinal(ctx, req.(*VerifyFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_VerifyRecoverInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRecoverInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).VerifyRecoverInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/VerifyRecoverInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).VerifyRecoverInit(ctx, req.(*VerifyRecoverInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_VerifyRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).VerifyRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/VerifyRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).VerifyRecover(ctx, req.(*VerifyRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DigestEncryptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigestEncryptUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DigestEncryptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DigestEncryptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DigestEncryptUpdate(ctx, req.(*DigestEncryptUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DecryptDigestUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptDigestUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DecryptDigestUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DecryptDigestUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DecryptDigestUpdate(ctx, req.(*DecryptDigestUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_SignEncryptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignEncryptUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).SignEncryptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/SignEncryptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).SignEncryptUpdate(ctx, req.(*SignEncryptUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DecryptVerifyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptVerifyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DecryptVerifyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DecryptVerifyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DecryptVerifyUpdate(ctx, req.(*DecryptVerifyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GenerateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GenerateKey(ctx, req.(*GenerateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GenerateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GenerateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GenerateKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GenerateKeyPair(ctx, req.(*GenerateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_WrapKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WrapKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).WrapKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/WrapKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).WrapKey(ctx, req.(*WrapKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_UnwrapKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnwrapKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).UnwrapKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/UnwrapKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).UnwrapKey(ctx, req.(*UnwrapKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_DeriveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).DeriveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/DeriveKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).DeriveKey(ctx, req.(*DeriveKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_SeedRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedRandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).SeedRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/SeedRandom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).SeedRandom(ctx, req.(*SeedRandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_GenerateRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).GenerateRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/GenerateRandom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).GenerateRandom(ctx, req.(*GenerateRandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS11_WaitForSlotEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForSlotEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCS11Server).WaitForSlotEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKCS11/WaitForSlotEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCS11Server).WaitForSlotEvent(ctx, req.(*WaitForSlotEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PKCS11_ServiceDesc is the grpc.ServiceDesc for PKCS11 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PKCS11_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PKCS11",
	HandlerType: (*PKCS11Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _PKCS11_New_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _PKCS11_Destroy_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _PKCS11_Initialize_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _PKCS11_Finalize_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _PKCS11_GetInfo_Handler,
		},
		{
			MethodName: "GetSlotList",
			Handler:    _PKCS11_GetSlotList_Handler,
		},
		{
			MethodName: "GetSlotInfo",
			Handler:    _PKCS11_GetSlotInfo_Handler,
		},
		{
			MethodName: "GetTokenInfo",
			Handler:    _PKCS11_GetTokenInfo_Handler,
		},
		{
			MethodName: "GetMechanismList",
			Handler:    _PKCS11_GetMechanismList_Handler,
		},
		{
			MethodName: "GetMechanismInfo",
			Handler:    _PKCS11_GetMechanismInfo_Handler,
		},
		{
			MethodName: "InitToken",
			Handler:    _PKCS11_InitToken_Handler,
		},
		{
			MethodName: "InitPIN",
			Handler:    _PKCS11_InitPIN_Handler,
		},
		{
			MethodName: "SetPIN",
			Handler:    _PKCS11_SetPIN_Handler,
		},
		{
			MethodName: "OpenSession",
			Handler:    _PKCS11_OpenSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _PKCS11_CloseSession_Handler,
		},
		{
			MethodName: "CloseAllSessions",
			Handler:    _PKCS11_CloseAllSessions_Handler,
		},
		{
			MethodName: "GetSessionInfo",
			Handler:    _PKCS11_GetSessionInfo_Handler,
		},
		{
			MethodName: "GetOperationState",
			Handler:    _PKCS11_GetOperationState_Handler,
		},
		{
			MethodName: "SetOperationState",
			Handler:    _PKCS11_SetOperationState_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PKCS11_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _PKCS11_Logout_Handler,
		},
		{
			MethodName: "CreateObject",
			Handler:    _PKCS11_CreateObject_Handler,
		},
		{
			MethodName: "CopyObject",
			Handler:    _PKCS11_CopyObject_Handler,
		},
		{
			MethodName: "DestroyObject",
			Handler:    _PKCS11_DestroyObject_Handler,
		},
		{
			MethodName: "GetObjectSize",
			Handler:    _PKCS11_GetObjectSize_Handler,
		},
		{
			MethodName: "GetAttributeValue",
			Handler:    _PKCS11_GetAttributeValue_Handler,
		},
		{
			MethodName: "SetAttributeValue",
			Handler:    _PKCS11_SetAttributeValue_Handler,
		},
		{
			MethodName: "FindObjectsInit",
			Handler:    _PKCS11_FindObjectsInit_Handler,
		},
		{
			MethodName: "FindObjects",
			Handler:    _PKCS11_FindObjects_Handler,
		},
		{
			MethodName: "FindObjectsFinal",
			Handler:    _PKCS11_FindObjectsFinal_Handler,
		},
		{
			MethodName: "EncryptInit",
			Handler:    _PKCS11_EncryptInit_Handler,
		},
		{
			MethodName: "Encrypt",
			Handler:    _PKCS11_Encrypt_Handler,
		},
		{
			MethodName: "EncryptUpdate",
			Handler:    _PKCS11_EncryptUpdate_Handler,
		},
		{
			MethodName: "EncryptFinal",
			Handler:    _PKCS11_EncryptFinal_Handler,
		},
		{
			MethodName: "DecryptInit",
			Handler:    _PKCS11_DecryptInit_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _PKCS11_Decrypt_Handler,
		},
		{
			MethodName: "DecryptUpdate",
			Handler:    _PKCS11_DecryptUpdate_Handler,
		},
		{
			MethodName: "DecryptFinal",
			Handler:    _PKCS11_DecryptFinal_Handler,
		},
		{
			MethodName: "DigestInit",
			Handler:    _PKCS11_DigestInit_Handler,
		},
		{
			MethodName: "Digest",
			Handler:    _PKCS11_Digest_Handler,
		},
		{
			MethodName: "DigestUpdate",
			Handler:    _PKCS11_DigestUpdate_Handler,
		},
		{
			MethodName: "DigestKey",
			Handler:    _PKCS11_DigestKey_Handler,
		},
		{
			MethodName: "DigestFinal",
			Handler:    _PKCS11_DigestFinal_Handler,
		},
		{
			MethodName: "SignInit",
			Handler:    _PKCS11_SignInit_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _PKCS11_Sign_Handler,
		},
		{
			MethodName: "SignUpdate",
			Handler:    _PKCS11_SignUpdate_Handler,
		},
		{
			MethodName: "SignFinal",
			Handler:    _PKCS11_SignFinal_Handler,
		},
		{
			MethodName: "SignRecoverInit",
			Handler:    _PKCS11_SignRecoverInit_Handler,
		},
		{
			MethodName: "SignRecover",
			Handler:    _PKCS11_SignRecover_Handler,
		},
		{
			MethodName: "VerifyInit",
			Handler:    _PKCS11_VerifyInit_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _PKCS11_Verify_Handler,
		},
		{
			MethodName: "VerifyUpdate",
			Handler:    _PKCS11_VerifyUpdate_Handler,
		},
		{
			MethodName: "VerifyFinal",
			Handler:    _PKCS11_VerifyFinal_Handler,
		},
		{
			MethodName: "VerifyRecoverInit",
			Handler:    _PKCS11_VerifyRecoverInit_Handler,
		},
		{
			MethodName: "VerifyRecover",
			Handler:    _PKCS11_VerifyRecover_Handler,
		},
		{
			MethodName: "DigestEncryptUpdate",
			Handler:    _PKCS11_DigestEncryptUpdate_Handler,
		},
		{
			MethodName: "DecryptDigestUpdate",
			Handler:    _PKCS11_DecryptDigestUpdate_Handler,
		},
		{
			MethodName: "SignEncryptUpdate",
			Handler:    _PKCS11_SignEncryptUpdate_Handler,
		},
		{
			MethodName: "DecryptVerifyUpdate",
			Handler:    _PKCS11_DecryptVerifyUpdate_Handler,
		},
		{
			MethodName: "GenerateKey",
			Handler:    _PKCS11_GenerateKey_Handler,
		},
		{
			MethodName: "GenerateKeyPair",
			Handler:    _PKCS11_GenerateKeyPair_Handler,
		},
		{
			MethodName: "WrapKey",
			Handler:    _PKCS11_WrapKey_Handler,
		},
		{
			MethodName: "UnwrapKey",
			Handler:    _PKCS11_UnwrapKey_Handler,
		},
		{
			MethodName: "DeriveKey",
			Handler:    _PKCS11_DeriveKey_Handler,
		},
		{
			MethodName: "SeedRandom",
			Handler:    _PKCS11_SeedRandom_Handler,
		},
		{
			MethodName: "GenerateRandom",
			Handler:    _PKCS11_GenerateRandom_Handler,
		},
		{
			MethodName: "WaitForSlotEvent",
			Handler:    _PKCS11_WaitForSlotEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}
